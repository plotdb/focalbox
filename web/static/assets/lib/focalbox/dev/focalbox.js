// Generated by LiveScript 1.6.0
(function(){
  var main;
  main = function(opt){
    opt == null && (opt = {});
    this.opt = opt;
    this.box = null;
    this.target = null;
    this.hosts = [];
    this.addHost(opt.host);
    this.padding = opt.padding || 6;
    this.init();
    return this;
  };
  main.prototype = import$(Object.create(Object.prototype), {
    init: function(){
      document.body.appendChild(this.box = document.createElement('div'));
      return this.box.classList.add('focalbox', 'hidden');
    },
    addHost: function(h){
      return this.hosts = this.hosts.concat((Array.isArray(h)
        ? h
        : [h]).map(function(it){
        if (typeof it === 'string') {
          return document.querySelector(it);
        } else if (it) {
          return it;
        } else {
          return null;
        }
      }).filter(function(it){
        return it;
      }));
    },
    setTarget: function(n){
      this.target = n;
      return this.render();
    },
    render: function(){
      var n, ref$, box, p;
      n = this.target;
      if (!n) {
        return this.box.classList.remove('active', 'moving');
      }
      ref$ = [n.getBoundingClientRect(), this.padding], box = ref$[0], p = ref$[1];
      import$(this.box.style, {
        left: (box.x - p) + "px",
        top: (box.y - p) + "px",
        width: (box.width + p * 2) + "px",
        height: (box.height + p * 2) + "px"
      });
      if (this.box.classList.contains('active')) {
        this.box.classList.add('moving');
      }
      return this.box.classList.add('active');
    }
  });
  if (typeof module != 'undefined' && module !== null) {
    module.exports = main;
  }
  if (typeof window != 'undefined' && window !== null) {
    window.focalbox = main;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
